package accessnyc.rules.household;

import accessnyc.request.Person
import accessnyc.request.Household


rule "Determine whether the head of household is married"
    dialect "mvel"
    when
        Person(headOfHouseholdRelation == "Spouse")
    then
        insertLogical(new HeadOfHouseholdMarried(true));    

end

rule "Determine the number of household members including HoH, spouse, children, stepchildren"
    dialect "mvel"
    when
        accumulate(
            Person((headOfHousehold == true || headOfHouseholdRelation in ("Spouse","Child","StepChild")), $value : age);
            $count : count($value)
        )
    then
        insertLogical(new MembersNuclearOnly($count));
end

rule "Determine the number of foster children in the household"
    dialect "mvel"
    when
        $person : Person()
        accumulate(
            Person(headOfHouseholdRelation == "FosterChild", $value : headOfHouseholdRelation);
            $count : count($value)
        )
    then
        insertLogical(new FosterChildren($count));

end
//this needs to be tested in production
rule "Count number of pregnant women in household"
    dialect "mvel"
    when
        $person : Person()
        accumulate(
            Person(pregnant == true, $pregnant : pregnant);
            $count : count($pregnant)
        )
    then
        insertLogical(new MembersPregnant($count));
end

//these foster calculations need to be validated
rule "Count number of pregnant women in household who are not foster children of the HoH"
    dialect "mvel"
    when
        $person : Person()
        accumulate(
            Person((pregnant == true && headOfHouseholdRelation not in ("FosterChild")), $pregnant : pregnant);
            $count : count($pregnant)
        )
    then
        insertLogical(new MembersPregnantNotFoster($count));
end


rule "Calculate pregnant household members (who are not foster children) plus normal household members minus foster children"
    dialect "mvel"
    when
        Household($members : members)
        MembersPregnantNotFoster($membersPregnant : value)
        FosterChildren($foster : value)
        
    then
        Integer $total = $members + $membersPregnant - $foster;
        insertLogical(new MembersPlusPregnantMinusFoster($total));
end

rule "Calculate pregnant household members plus normal household members"
    dialect "mvel"
    when
        Household($members : members)
        MembersPregnant($membersPregnant : value)
    then
        Integer $total = $members + $membersPregnant;
        insertLogical(new MembersPlusPregnant($total));
end

rule "Determine number of children under age 19 or student under age 24"
    dialect "mvel"
    when
        Person(headOfHousehold == true, $hohAge : age)
        // If the household has a spouse, set the spouse's age; otherwise, set it to be the HOH's age
        ( Person(headOfHouseholdRelation == "Spouse", $spouseAge : age) || Person(headOfHousehold == true, $spouseAge : age) )
        accumulate(
            Person(
                (
                    (
                        (age < 19 || (studentFulltime == true && age < 24)) 
                        && (age < $hohAge || age < $spouseAge)
                    )
                    || blind == true || disabled == true) 
                && headOfHousehold == false 
                && headOfHouseholdRelation in ("Child", "StepChild", "FosterChild", "Grandchild", "SisterBrother"), $age : age);
            $count : count($age)
        )
    then 
        insertLogical(new ChildrenStudentBlindDisabledEITC($count));
end

rule "Determine the number of household members including HoH, spouse, children and stepchildren under 18, and blind or disabled children and stepchildren 19 or younger who are full time students"
    dialect "mvel"
    when
        accumulate(
            Person(
                ( 
                    headOfHousehold == true 
                    || headOfHouseholdRelation in ("Self","Spouse", "DomesticPartner", "BoyfriendGirlfriend")
                    ||  age < 18 
                    || (age == 18 && studentFulltime == true && (blind == true || disabled == true))
                ), 
                $value : age);
            $count : count($value)
        )
    then
        insertLogical(new ChildCareVoucherHouseholdMembers($count));
end

rule "Determine whether all household members are adults"
dialect "mvel"
    when
        Household($members : members)
        accumulate(
            Person(age >= 18, $value : age);
            $count : count($value)
        )
    then
        insertLogical(new HouseholdAllAdults($count == $members));
end
